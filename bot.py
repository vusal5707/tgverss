import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters import ReplyFilter
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_INPUT_ID = os.getenv("GROUP_INPUT_ID")  # –ì—Ä—É–ø–ø–∞, –≥–¥–µ –ø–∏—à—É—Ç –∑–∞–ø—Ä–æ—Å—ã
GROUP_OUTPUT_ID = os.getenv("GROUP_OUTPUT_ID")  # –ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_requests = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler()
async def handle_user_message(message: Message):
    chat_id = message.chat.id
    text = message.text
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    parts = text.split()
    if len(parts) < 4:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞")
        return
    
    doc_type, party_id, email, date = parts[0], parts[1], parts[2], " ".join(parts[3:])
    
    formatted_message = (f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                         f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                         f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n"
                         f"üÜî Party ID: {party_id}\n"
                         f"üìß Email: {email}\n"
                         f"üìÖ –î–∞—Ç–∞: {date}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É ‚Ññ2
    sent_message = await bot.send_message(GROUP_OUTPUT_ID, formatted_message)
    user_requests[sent_message.message_id] = chat_id  # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    approve_button = types.InlineKeyboardButton("–î–∞", callback_data=f"approve_{sent_message.message_id}")
    reject_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"reject_{sent_message.message_id}")
    custom_button = types.InlineKeyboardButton("–°–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"custom_{sent_message.message_id}")
    keyboard.add(approve_button, reject_button, custom_button)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ ‚Ññ2, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.edit_message_text(formatted_message, chat_id=GROUP_OUTPUT_ID, message_id=sent_message.message_id, reply_markup=keyboard)
    
    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ OUTPUT
@dp.message_handler(ReplyFilter(), chat_id=GROUP_OUTPUT_ID)
async def handle_group_reply(message: Message):
    if message.reply_to_message and message.reply_to_message.message_id in user_requests:
        user_chat_id = user_requests[message.reply_to_message.message_id]
        await bot.send_message(user_chat_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n{message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–¥–∞, –Ω–µ—Ç, —Å–≤–æ–π –æ—Ç–≤–µ—Ç)
@dp.callback_query_handler(lambda c: c.data.startswith("approve") or c.data.startswith("reject") or c.data.startswith("custom"))
async def handle_callback(callback: CallbackQuery):
    action, message_id = callback.data.split("_", 1)
    message_id = int(message_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≥—Ä—É–ø–ø–µ OUTPUT
    if callback.message.chat.id != GROUP_OUTPUT_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º message_id
    if message_id not in user_requests:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    user_chat_id = user_requests[message_id]
    
    # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫
    if action == "approve":
        await bot.send_message(user_chat_id, "‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!</b>")
        await callback.message.edit_text(callback.message.text + "\n\n‚úÖ <b>–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å.</b>", reply_markup=None)

    elif action == "reject":
        await bot.send_message(user_chat_id, "‚ùå <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>")
        await callback.message.edit_text(callback.message.text + "\n\n‚ùå <b>–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.</b>", reply_markup=None)

    elif action == "custom":
        await bot.send_message(user_chat_id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        user_requests[callback.from_user.id] = user_chat_id

    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
