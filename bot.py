import logging
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_INPUT_ID = os.getenv("GROUP_INPUT_ID")  # –ì—Ä—É–ø–ø–∞, –≥–¥–µ –ø–∏—à—É—Ç –∑–∞–ø—Ä–æ—Å—ã
GROUP_OUTPUT_ID = os.getenv("GROUP_OUTPUT_ID")  # –ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
requests_log = []

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø—Ä–∏–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
categories = ['—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ', '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ', '–¥—Ä—É–≥–∏–µ']

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
priorities = ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_requests = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler()
async def handle_user_message(message: Message):
    text = message.text
    chat_id = message.chat.id
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    parts = text.split()
    if len(parts) < 4:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return
    
    doc_type, party_id, email, date = parts[0], parts[1], parts[2], " ".join(parts[3:])
    
    # –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
    if message.document:
        file_info = await bot.get_file(message.document.file_id)
        file_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}'
        attached_file = f'–§–∞–π–ª: {file_url}'
    else:
        attached_file = "–§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω."

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    category = "–¥—Ä—É–≥–∏–µ"
    priority = "—Å—Ä–µ–¥–Ω–∏–π"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
    request = {
        'doc_type': doc_type,
        'party_id': party_id,
        'email': email,
        'date': date,
        'category': category,
        'priority': priority,
        'attached_file': attached_file,
        'timestamp': datetime.now()
    }
    
    requests_log.append(request)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    formatted_message = (f"üîπ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}\n"
                         f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n"
                         f"üÜî Party ID: {party_id}\n"
                         f"üìß Email: {email}\n"
                         f"üìÖ –î–∞—Ç–∞: {date}\n"
                         f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                         f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                         f"{attached_file}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É
    sent_message = await bot.send_message(GROUP_OUTPUT_ID, formatted_message)
    user_requests[sent_message.message_id] = chat_id  # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    
    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
@dp.message_handler(commands=['admin'])
async def admin_interface(message: Message):
    admin_id = message.from_user.id
    if admin_id == YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n\n"
        for request in requests_log:
            text += (f"üìÑ {request['doc_type']} | üÜî {request['party_id']} | üìß {request['email']} | "
                     f"üóÇ {request['category']} | ‚ö†Ô∏è {request['priority']} | üìÖ {request['date']}\n"
                     f"{request['attached_file']}\n\n")
        await message.reply(text)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ –∑–∞–ø—Ä–æ—Å–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
@dp.message_handler(commands=['report'])
async def generate_report(message: Message):
    admin_id = message.from_user.id
    if admin_id == YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        text = "–û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:\n\n"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_filter = message.text.split()[-1] if len(message.text.split()) > 1 else None
        filtered_requests = [req for req in requests_log if (category_filter and req['category'] == category_filter) or not category_filter]
        
        for req in filtered_requests:
            text += (f"üìÑ {req['doc_type']} | üÜî {req['party_id']} | üìß {req['email']} | "
                     f"üóÇ {req['category']} | ‚ö†Ô∏è {req['priority']} | üìÖ {req['date']}\n"
                     f"{req['attached_file']}\n\n")
        await message.reply(text)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
