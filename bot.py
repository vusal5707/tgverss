import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_INPUT_ID = int(os.getenv("GROUP_INPUT_ID"))  # –ì—Ä—É–ø–ø–∞ ‚Ññ1 (–∫—É–¥–∞ –ø–∏—à—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
GROUP_OUTPUT_ID = int(os.getenv("GROUP_OUTPUT_ID"))  # –ì—Ä—É–ø–ø–∞ ‚Ññ2 (–∫—É–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_requests = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã)
@dp.message()
async def handle_user_message(message: Message):
    chat_id = message.chat.id
    text = message.caption if message.caption else message.text  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Ññ2
    if chat_id == GROUP_OUTPUT_ID:
        return

    if not text:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞</b>\n"
                            "–ï—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç–µ —Ñ–∞–π–ª, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–æ–¥–ø–∏—Å—å.")
        return

    parts = text.split()
    if len(parts) < 4:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞</b>")
        return

    doc_type, party_id, email, date = parts[0], parts[1], parts[2], " ".join(parts[3:])
    
    formatted_message = (f"üîπ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n"
                         f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
                         f"üìÑ <b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {doc_type}\n"
                         f"üÜî <b>Party ID:</b> {party_id}\n"
                         f"üìß <b>Email:</b> {email}\n"
                         f"üìÖ <b>–î–∞—Ç–∞:</b> {date}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"approve_{message.message_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"reject_{message.message_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"custom_{message.message_id}")]
    ])

    sent_message = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if message.document:
        sent_message = await bot.send_document(GROUP_OUTPUT_ID, message.document.file_id, caption=formatted_message, reply_markup=keyboard)
    elif message.photo:
        sent_message = await bot.send_photo(GROUP_OUTPUT_ID, message.photo[-1].file_id, caption=formatted_message, reply_markup=keyboard)
    elif message.video:
        sent_message = await bot.send_video(GROUP_OUTPUT_ID, message.video.file_id, caption=formatted_message, reply_markup=keyboard)
    else:
        sent_message = await bot.send_message(GROUP_OUTPUT_ID, formatted_message, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if sent_message:
        user_requests[sent_message.message_id] = chat_id
        await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    callback_data = callback.data
    admin_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Ññ2
    if chat_id != GROUP_OUTPUT_ID:
        return

    action, original_message_id = callback_data.split("_")
    original_message_id = int(original_message_id)

    if original_message_id not in user_requests:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    user_chat_id = user_requests[original_message_id]

    if action == "approve":
        await bot.send_message(user_chat_id, "‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!</b>")
        await callback.message.edit_text(callback.message.text + "\n\n‚úÖ <b>–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å.</b>", reply_markup=None)

    elif action == "reject":
        await bot.send_message(user_chat_id, "‚ùå <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>")
        await callback.message.edit_text(callback.message.text + "\n\n‚ùå <b>–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.</b>", reply_markup=None)

    elif action == "custom":
        await bot.send_message(admin_id, "‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</b>")
        user_requests[admin_id] = user_chat_id  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª—è "–°–≤–æ–π –æ—Ç–≤–µ—Ç")
@dp.message()
async def handle_admin_custom_reply(message: Message):
    admin_id = message.chat.id

    if admin_id in user_requests:
        user_chat_id = user_requests.pop(admin_id)
        await bot.send_message(user_chat_id, f"‚úâÔ∏è <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{message.text}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
