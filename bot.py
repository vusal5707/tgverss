import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_INPUT_ID = int(os.getenv("GROUP_INPUT_ID"))  # –ì—Ä—É–ø–ø–∞, –≥–¥–µ –ø–∏—à—É—Ç –∑–∞–ø—Ä–æ—Å—ã
GROUP_OUTPUT_ID = int(os.getenv("GROUP_OUTPUT_ID"))  # –ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_requests = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message()
async def handle_user_message(message: Message):
    chat_id = message.chat.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Ññ2
    if chat_id == GROUP_OUTPUT_ID:
        return

    parts = text.split()
    if len(parts) < 4:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞")
        return

    doc_type, party_id, email, date = parts[0], parts[1], parts[2], " ".join(parts[3:])
    
    formatted_message = (f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                         f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                         f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n"
                         f"üÜî Party ID: {party_id}\n"
                         f"üìß Email: {email}\n"
                         f"üìÖ –î–∞—Ç–∞: {date}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"approve_{message.message_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"reject_{message.message_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"custom_{message.message_id}")]
    ])

    sent_message = await bot.send_message(GROUP_OUTPUT_ID, formatted_message, reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_requests[sent_message.message_id] = chat_id

    await message.reply("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    callback_data = callback.data
    admin_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Ññ2
    if chat_id != GROUP_OUTPUT_ID:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏
    action, original_message_id = callback_data.split("_")
    original_message_id = int(original_message_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if original_message_id not in user_requests:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    user_chat_id = user_requests[original_message_id]

    if action == "approve":
        await bot.send_message(user_chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!")
        await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å.", reply_markup=None)

    elif action == "reject":
        await bot.send_message(user_chat_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        await callback.message.edit_text(callback.message.text + "\n\n‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å.", reply_markup=None)

    elif action == "custom":
        await bot.send_message(admin_id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        user_requests[admin_id] = user_chat_id  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∏

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª—è "–°–≤–æ–π –æ—Ç–≤–µ—Ç")
@dp.message()
async def handle_admin_custom_reply(message: Message):
    admin_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∏—Å–∞–ª –ª–∏ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç
    if admin_id in user_requests:
        user_chat_id = user_requests.pop(admin_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.send_message(user_chat_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")

