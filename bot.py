import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_INPUT_ID = os.getenv("GROUP_INPUT_ID")  # –ì—Ä—É–ø–ø–∞, –≥–¥–µ –ø–∏—à—É—Ç –∑–∞–ø—Ä–æ—Å—ã
GROUP_OUTPUT_ID = os.getenv("GROUP_OUTPUT_ID")  # –ì—Ä—É–ø–ø–∞, –∫—É–¥–∞ –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç
YOUR_ADMIN_ID = os.getenv("YOUR_ADMIN_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_requests = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
request_count = 0
priority_settings = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
menu_settings = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_user_message(message: Message):
    global request_count
    chat_id = message.chat.id
    text = message.text
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    parts = text.split()
    if len(parts) < 4:
        await message.reply("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ Party ID Email –î–∞—Ç–∞", parse_mode="HTML")
        return
    
    doc_type, party_id, email, date = parts[0], parts[1], parts[2], " ".join(parts[3:])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π", callback_data="priority_high"),
        InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium"),
        InlineKeyboardButton("–ù–∏–∑–∫–∏–π", callback_data="priority_low")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = (f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                         f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                         f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n"
                         f"üÜî Party ID: {party_id}\n"
                         f"üìß Email: {email}\n"
                         f"üìÖ –î–∞—Ç–∞: {date}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    sent_message = await bot.send_message(chat_id, formatted_message, reply_markup=keyboard, parse_mode="HTML")
    user_requests[sent_message.message_id] = chat_id  # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    request_count += 1
    await message.reply(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
async def handle_priority_choice(callback_query: types.CallbackQuery):
    user_chat_id = user_requests.get(callback_query.message.message_id)
    if user_chat_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if callback_query.data == "priority_high":
            priority = "–í—ã—Å–æ–∫–∏–π"
        elif callback_query.data == "priority_medium":
            priority = "–°—Ä–µ–¥–Ω–∏–π"
        else:
            priority = "–ù–∏–∑–∫–∏–π"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
        await bot.send_message(user_chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}", parse_mode="HTML")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        formatted_message_with_priority = f"{callback_query.message.text}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É OUTPUT —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–î–∞", callback_data="yes"))
        keyboard.add(InlineKeyboardButton("–ù–µ—Ç", callback_data="no"))
        keyboard.add(InlineKeyboardButton("–°–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="custom"))
        
        await bot.send_message(GROUP_OUTPUT_ID, formatted_message_with_priority, reply_markup=keyboard, parse_mode="HTML")
        await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ OUTPUT (–æ—Ç –∞–¥–º–∏–Ω–∞)
async def handle_group_reply(message: Message):
    if message.reply_to_message and message.reply_to_message.message_id in user_requests:
        user_chat_id = user_requests[message.reply_to_message.message_id]
        await bot.send_message(user_chat_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n{message.text}", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ (–î–∞, –ù–µ—Ç, –°–≤–æ–π –æ—Ç–≤–µ—Ç)
async def handle_callback(callback_query: types.CallbackQuery):
    user_chat_id = user_requests.get(callback_query.message.message_id)
    if user_chat_id:
        if callback_query.data == "yes":
            await bot.send_message(user_chat_id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.", parse_mode="HTML")
        elif callback_query.data == "no":
            await bot.send_message(user_chat_id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.", parse_mode="HTML")
        elif callback_query.data == "custom":
            await bot.send_message(user_chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.", parse_mode="HTML")
        
        await callback_query.answer()

# –ö–æ–º–∞–Ω–¥–∞ /settings –¥–ª—è –∞–¥–º–∏–Ω–∞, –≥–¥–µ –æ–Ω –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
@dp.callback_query_handler(commands=['settings'])
async def settings_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == int(YOUR_ADMIN_ID):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", callback_data="set_priority"),
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é", callback_data="set_menu")
        )
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", parse_mode="HTML")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data == "set_priority")
async def set_priority(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π):")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text in ["–≤—ã—Å–æ–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–Ω–∏–∑–∫–∏–π"])
async def set_priority_response(message: Message):
    priority = message.text
    priority_settings[message.chat.id] = priority
    await message.reply(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {priority}", parse_mode="HTML")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "set_menu")
async def set_menu(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text)
async def set_menu_response(message: Message):
    menu_settings[message.chat.id] = message.text
    await message.reply(f"–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}", parse_mode="HTML")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.register_message_handler(handle_user_message, F.text)
dp.register_message_handler(handle_group_reply, F.reply_to_message & F.chat_id(GROUP_OUTPUT_ID))
dp.register_callback_query_handler(handle_callback)
dp.register_callback_query_handler(handle_priority_choice, lambda c: c.data in ["priority_high", "priority_medium", "priority_low"])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
